// class Solution {
// public:
//     void merge(int arr[],int l,int m,int r,int &ans)
//     {
//         int n1=(m-l)+1;
//         int n2=(r-m);
        
//         int a1[n1];
//         int a2[n2];
//         int  k=0;
//         for(int i=l;i<=m;i++)
//         {
//             a1[k]=arr[i];
//             k++;
//         }
//         k=0;
//         for(int i=m+1;i<=r;i++)
//         {
//             a2[k]=arr[i];
//             k++;
//         }
        
        
//          int i=0;
//          int j=0;
//         k=l;
        
//           for(i=0;i<n1;i++)
//     {
//         while(j<n2 && (int)[i]>2*(long long int)M[j])
//             j++;
        
//         ans+=j;
//     }
//         while(i<n1&&j<n2)
//         {
//             if(a1[i]<=a2[j])
//             {
//                 arr[k]=a1[i];
//                 i++;
//                 k++;
//             }
           
//         }
       
//         while(i<n1)
//         {
//             arr[k]=a1[i];
//             i++;
//             k++;
//         }
        
//         while(j<n2)
//         {
//             arr[k]=a2[j];
//             j++;
//             k++;
//         }
//         return;
//     }
    
//     void mergesort(int arr[],int l,int r,int &ans)
//     {
//         if(l<r)
//         {
//             int mid=l+(r-l)/2;
//             mergesort(arr,l,mid,ans);
//             mergesort(arr,mid+1,r,ans);
            
//             merge(arr,l,mid,r,ans);
//         }
//          return;
//     }
//     int reversePairs(vector<int>& nums) {
//            int ans=0;
//           int* arr=new int[nums.size()];
//         for(int i=0;i<nums.size();i++)
//         {
//             arr[i]=nums[i];
//         }
//        mergesort(arr,0,nums.size()-1,ans);
//        return ans;
//     }
// };


class Solution {
public:
    
    // Merge two subarrays L and M into arr
void merge(int arr[], int p, int q, int r,int& count) {
  
    
  int n1 = q - p + 1;
  int n2 = r - q;

  int L[n1], M[n2];

  for (int i = 0; i < n1; i++)
    L[i] = arr[p + i];
  for (int j = 0; j < n2; j++)
    M[j] = arr[q + 1 + j];

  // Maintain current index of sub-arrays and main array
  int i, j, k;
  i = 0;
  j = 0;
  k = p;

    // lets count reverse pairs
    for(i=0;i<n1;i++)
    {
        while(j<n2 && (long long int)L[i]>2*(long long int)M[j])
            j++;
        
        count+=j;
    }

    
  i = 0;
  j = 0;
  k = p;
  while (i < n1 && j < n2) {
      
      
      
    if (L[i] <= M[j]) {
      arr[k] = L[i];
      i++;
    } else {     
      arr[k] = M[j];
      j++;
    }
    k++;
  }

  while (i < n1) {
    arr[k] = L[i];
    i++;
    k++;
  }

  while (j < n2) {
    arr[k] = M[j];
    j++;
    k++;
  }
}

// Divide the array into two subarrays, sort them and merge them
void mergeSort(int arr[], int l, int r,int& count) 
{
  if (l < r) 
  {
    int m = l + (r - l) / 2;
    mergeSort(arr, l, m,count);
    mergeSort(arr, m + 1, r,count);
    merge(arr, l, m, r,count);
  }
}
    int reversePairs(vector<int>& nums) {
        int count=0;
        int* arr=new int[nums.size()];
        for(int i=0;i<nums.size();i++)
        {
            arr[i]=nums[i];
        }
        mergeSort(arr, 0,nums.size()-1,count);
        return count;
        
    }
};


